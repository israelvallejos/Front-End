** start of undefined **

<link rel="stylesheet" href="styles.css">
<nav id="navbar">
  <header id="title"><strong>Python Documentation</strong></header>
<ul>
<li><a class="nav-link" href="#history">History</a></li>
<li><a class="nav-link" href="#features">Features</a></li>
<li><a class="nav-link" href="#hardware">Hardware</a></li>
<li><a class="nav-link" href="#expressions">Expressions</a></li>
<li><a class="nav-link" href="#syntax_and_semantics">Syntax and Semantics</a></li>
<li><a class="nav-link" href="#programming_examples">Programming Examples</a></li>
<li><a class="nav-link" href="#methods">Methods</a></li>
<li><a class="nav-link" href="#legal_issues">Legal Issues</a></li>
<li><a class="nav-link" href="#typing">Typing</a></li>
<li><a class="nav-link" href="#arithmetic_operations">Arithmetic Operations</a></li>
<li><a class="nav-link" href="#other_implementations">Other Implementations</a></li>
</ul>
</nav>
<main id="main-doc">
<section id="history" class="main-section">
<header><strong>History</strong></header>
<article>
<p>Python was conceived in the late 1980s[41] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[42] capable of exception handling and interfacing with the Amoeba operating system.[13] Its implementation began in December 1989.[43] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his "permanent vacation" from his responsibilities as Python's "benevolent dictator for life", a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker.[44] In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[45][46]</p>
</article>


</section>
<section class="main-section" id="features">
<header><strong>Features</strong></header>
<article>
  <p>Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of its features support functional programming and aspect-oriented programming (including metaprogramming[62] and metaobjects [magic methods] ).[63] Many other paradigms are supported via extensions, including design by contract[64][65] and logic programming.[66]</p>

<p>Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management.[67] It uses dynamic name resolution (late binding), which binds method and variable names during program execution.</p>
</article>
</section>

<section class="main-section" id="hardware">
<header><strong>Hardware</strong></header>
<article>
  <p>Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[81] Thus, the program's visual structure accurately represents its semantic structure.[82] This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.[83]</p>
</article>
</section>

<section class="main-section" id="expressions">
  <header><strong>Expressions</strong></header>
<article>
  <p>Some Python expressions are similar to those in languages such as C and Java, while some are not:</p>
<code>
  "spam=%s eggs=%d" % ("blah", 2)
</code><br>
<code>
  c ? x : y
</code><br>
<code>
  if (c = 1) { ... }
</code>
</article>
</section><br>

<section class="main-section" id="syntax_and_semantics">
  <header><strong>Syntax and semantics</strong></header>
<article>
  <p>Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal.[80].</p>
  </article>

</section><br>

<section class="main-section" id="programming_examples">
  <header><strong>Programming Examples</strong></header>
<article>
  <p>Hello world program:</p>
<code>
  print('Hello, world!')
</code>
</article>
</section><br>

<section class="main-section" id="methods">
  <header><strong>Methods</strong></header>
<article>
  <p>Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) in some other object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby).[100] Python also provides methods, often called dunder methods (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in arithmetic operations and type conversion.[101]</p>
<code>
  instance.method(argument)
</code>
</article>
</section><br>

<section class="main-section" id="legal_issues">
  <header><strong>Legal Issues</strong></header>
<article>
  <p>The success of Android has made it a target for patent and copyright litigation between technology companies, both Android and Android phone manufacturers having been involved in numerous patent lawsuits and other legal challenges.</p>
</article>
</section><br>

<section class="main-section" id="typing">
  <header><strong>Typing</strong></header>
<article>
  <p>Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being dynamically-typed, Python is strongly-typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.</p>
</article>
</section><br>

<section class="main-section" id="arithmetic_operations">
  <header><strong>Arithmetic Operations</strong></strong></header>
<article>
  <p>Python has the usual symbols for arithmetic operators (+, -, *, /), the floor division operator // and the modulo operation % (where the remainder can be negative, e.g. 4 % -3 == -2). It also has ** for exponentiation, e.g. 5**3 == 125 and 9**0.5 == 3.0, and a matrixâ€‘multiplication operator @ .[108] These operators work like in traditional math; with the same precedence rules, the operators infix (+ and - can also be unary to represent positive and negative numbers respectively).</p>
  </article>
</section><br>
<section class="main-section" id="other_implementations">
<header><strong>Other Implementations</strong></header>
<article><ul>
<li>PyPy is a fast, compliant interpreter of Python 2.7 and 3.8.[136] [137] Its just-in-time compiler brings a significant speed improvement over CPython but some libraries written in C cannot be used with it.</li>
<li>Stackless Python is a significant fork of CPython that implements microthreads; it does not use the call stack in the same way, thus allowing massively concurrent programs. PyPy also has a stackless version.[139]</li>
<li>MicroPython and CircuitPython are Python 3 variants optimized for microcontrollers, including Lego Mindstorms EV3.</li>
<li>Pyston is a variant of the Python runtime that uses just-in-time compilation to speed up the execution of Python programs.</li>
<li>Cinder is a performance-oriented fork of CPython 3.8 that contains a number of optimizations including bytecode inline caching, eager evaluation of coroutines, a method-at-a-time JIT and an experimental bytecode compiler.[142]</li>

</ul></article>
</section>
</main>

** end of undefined **

** start of undefined **

#navbar{
  position: absolute;
  border-right: solid;
  border-bottom: solid;
  border-color: grey;
  left: 0px;
  top: 2px;
  background-color: azure;
}
#main-doc{
  position: absolute;
  margin-left: 250px;
}

#navbar li {
  border: 1px solid;
  width:100%;
  height: auto;
  background-color: rgb(220,220,220);
  font-size: 15px;
}

#navbar a {
  display: block;
  padding: 20px 15px;
  cursor: pointer;
}

header {
  font-size: 1.5em;
}

code {
  background-color: rgb(220,220,220)
}

@media screen and (max-width: 1280px){
  #main-doc{
    width: 100%;
  }
}

#title{
  font-family: helvetica;
  text-align: center;
  font-size: 20px;
}

** end of undefined **

